#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

const Migrate = require("../");
const path = require("path");
const fs = require("fs");
const slice = Array.prototype.slice;

/**
 * Arguments.
 */

const args = process.argv.slice(2);

/**
 * Option defaults.
 */

const options = { args: [] };

/**
 * Usage information.
 */

const usage = [
    ''
  , '  Usage: migrate-js [options] [command]'
  , ''
  , '  Options:'
  , ''
  , '     -h, --help                  display this help menu'
  , '     -d, --migrations-dir <path> set the directory where migrations are created (default: ./migrations)'
  , '     -s, --state-manager  <name> set state manager module to store state (default: json)'
  , '     -t, --template       <name> set template module to create new migrations with (default: simple)'
  , ''
  , '  If set-manager is set to "mysql", you may specify the following options:'
  , ''
  , '     --mysql-host         <host> set host for mysql connection.'
  , '     --mysql-port         <port> set port for mysql connection.'
  , '     --mysql-database     <name> set database for mysql connection.'
  , '     --mysql-user         <name> set user for mysql connection.'
  , ''
  , '  Commands:'
  , ''
  , '     down            rollback all migrations'
  , '     up              execute all migrations (the default command)'
  , '     create [title]  create a new migration file with optional [title]'
  , ''
].join('\n');

/**
 * abort with a message.
 */

function abort(msg) {
  console.error('  %s', msg);
  process.exit(1);
}

/**
 * require an argument.
 */

function required() {
  if (args.length) return args.shift();
  abort(arg + ' requires an argument');
}

/**
 * parse arguments
 */

let arg;
while (args.length) {
  arg = args.shift();
  switch (arg) {
    case "-h":
    case "--help":
    case "help":
      console.log(usage);
      process.exit();
      break;
    case "-d":
    case "--migrations-dir":
      options.migrationsDirectory = require();
      break;
    case "-s":
    case "--state-manager":
      options.stateManager = required();
      break;
    case "-t":
    case "--template":
      options.template = required();
      break;
    case "--mysql-host":
      options.mysql = options.mysql || {};
      options.mysql.host = required();
      break;
    case "--mysql-port":
      options.mysql = options.mysql || {};
      options.mysql.port = required();
      break;
    case "--mysql-database":
      options.mysql = options.mysql || {};
      options.mysql.database = required();
      break;
    case "--mysql-user":
      options.mysql = options.mysql || {};
      options.mysql.user = required();
      break;
    default:
      if (options.command) {
        options.args.push(arg);
      } else {
        options.command = arg;
      }
  }
}

/**
 * Log a keyed message.
 */

function log(key, msg) {
  console.log("  \x1B[90m%s :\x1B[0m \x1B[36m%s\x1B[0m", key, msg);
}

/**
 * commands
 */

const commands = {

  /**
   * up
   */

  up: function() {
    performMigrations("up");
  },

  /**
   * down
   */

  down: function() {
    performMigrations("down");
  },

  /**
   * create [title]
   */

  create: function(title) {
    const migrate = new Migrate(options);
    
    let t = title;
    if (Array.isArray(t)) {
      t = t.join(" ");
    }
    
    return migrate.create(t);
  }
};

/**
 * Perform migrations in the given `direction`.
 *
 * @param {String} direction
 */

function performMigrations(direction) {
  const migrate = new Migrate(options);
  
  migrate.on("migration", (migration, direction) => {
    log(direction, migration.title);
  });
  
  return migrate[direction]()
  .then(() => {
    log("migration", "complete");
    process.exit(0);
  })
  .catch((err) => {
    log("error", err);
    process.exit(1);
  });
}

// invoke command

const commandName = options.command || "up";
if (!(commandName in commands)) abort(`unknown command "${commandName}"`);
const command = commands[commandName];
command(options.args);